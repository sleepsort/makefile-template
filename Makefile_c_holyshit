# Makefile for small c/c++ project
#
# Hierarchy:
# .
# |-- Makefile
# |-- lib
# |   `-- abc.a
# |-- obj
# |   |-- intermediate.o
# |   `-- target
# |-- othr
# |   `-- intermediate.cpp
# `-- main 
#     `-- target.cpp
#
# To build targets, simply:
# $ make
# 
# To (possibly) updates excutable files 
# and then run program:
# $ make all run
#

CC	:= g++
V	:= @
RM	+= -r
#LIB += -lpthread ./lib/abc.a
USER_FLAGS+= -Wall -O2 -I .
OBJ := ../obj/

targets := $(wildcard main/*.cpp) $(wildcard main/*.c)
objects := $(wildcard */*.cpp) $(wildcard */*.c)
objects := $(filter-out $(targets), $(objects))
objects := $(patsubst %.cpp,%.o,$(objects))
dirctry := $(sort $(dir $(objects)))
dirctry := $(patsubst %/,%,$(dirctry))
objects := $(notdir $(objects))
objects := $(addprefix $(OBJ),$(objects))
targets := $(basename $(notdir $(targets)))
targets := $(addprefix $(OBJ),$(targets))

define make-target
$(OBJ)$1: main/$1.cpp $(objects)
	@echo + cc $$<
	$(V)$(CC) $(USER_FLAGS) -o $$@ $$^ $(LIB)
endef

define make-intermediate 
$(OBJ)%.o: $1/%.cpp
	@echo + cc $$<
	$(V)$(CC) -c $(USER_FLAGS) -o $$@ $$^
endef

all:always $(targets)

$(foreach btar,$(targets),$(eval $(call make-target,$(notdir $(btar)))))
$(foreach bdir,$(dirctry),$(eval $(call make-intermediate,$(bdir))))

run:
	$(V)$(OBJ)target -arguments

.PHONY:clean always reset test
always:
	$(V)mkdir -p $(OBJ)
